name: Testing PrestaShop upgrade
on:
  workflow_call:
    inputs:
      upgrade_module_ref:
        description: Use a branch or tag for the autoupgrade module
        type: string
        required: true
      source_ref:
        description: Use a source branch or tag to start the upgrade from
        type: string
        required: true
      target_ref:
        description: Use a target branch or tag to upgrade to
        type: string
        required: true
      use_nightly_build:
        description: Use latest nightly matching the target branch, if not the branch is checkout from repository branch HEAD
        type: boolean
        required: true
      target_version:
        description: If you do not use the nightly release, you must specify the version of target branch (ex 1.7.8.9, 8.0.4)
        type: string
        required: false
      php_version:
        description: PHP version
        type: string
        required: true
      node_version:
        description: Node version
        type: string
        required: true
      upload_shop_on_failure:
        description: Upload upgraded shop as an artifact if tests failed
        type: boolean
        required: false
        default: false

jobs:
  # Pre-job : Get Upgrade target versions
  get_ps_nightly_target_version:
    name: Get Upgrade target versions
    runs-on: ubuntu-latest
    if: ${{ inputs.use_nightly_build }}
    steps:
      # Checkout the repository
      - uses: actions/checkout@v3
        with:
          path: main

      - id: get-nightly-versions
        name: Get source details from nightly last reports
        run: |
          echo Inputs "${{ toJSON(inputs) }}"
          echo source_version=$(php ./.github/scripts/get_version_from_nightly.php ${{ inputs.source_ref }}) >> $GITHUB_OUTPUT
          echo target_version=$(php ./.github/scripts/get_version_from_nightly.php ${{ inputs.target_ref }}) >> $GITHUB_OUTPUT
        working-directory: main

      - name: Display nightly versions
        shell: bash
        run: |
          echo Source "${{ steps.get-nightly-versions.outputs.source_version }}"
          echo Target "${{ steps.get-nightly-versions.outputs.target_version }}"
    outputs:
      source_version: ${{ steps.get-nightly-versions.outputs.source_version }}
      target_version: ${{ steps.get-nightly-versions.outputs.target_version }}

  testing-upgrade:
    runs-on: ubuntu-latest
    name: test
    needs: get_ps_nightly_target_version
    # Run even if get_ps_nightly_target_version was ignored
    if: always()
    strategy:
      fail-fast: false
      matrix:
        TEST_COMMAND:
          - 'cldr'
          - 'functional:API'
          - 'functional:BO:login'
          - 'functional:BO:dashboard'
          - 'functional:BO:orders:01:0-1'
          - 'functional:BO:orders:01-create-orders'
          - 'functional:BO:orders:01-view-and-edit-order'
          - 'functional:BO:orders:02'
          - 'functional:BO:orders:03-05'
          - 'functional:BO:catalog:01-02'
          - 'functional:BO:catalog:03-04'
          - 'functional:BO:catalog:05-06'
          - 'functional:BO:catalog:07-08'
          - 'functional:BO:customer:01'
          - 'functional:BO:customer:02-03'
          - 'functional:BO:customer-service'
          - 'functional:BO:modules'
          - 'functional:BO:design'
          - 'functional:BO:shipping'
          - 'functional:BO:payment'
          - 'functional:BO:international:01'
          - 'functional:BO:international:02'
          - 'functional:BO:international:03-04'
          - 'functional:BO:shop-parameters:01-02'
          - 'functional:BO:shop-parameters:03-04'
          - 'functional:BO:shop-parameters:05-07'
          - 'functional:BO:advanced-parameters:01-06'
          - 'functional:BO:advanced-parameters:07-10'
          - 'functional:BO:header'
          - 'functional:FO:01-03'
          - 'functional:FO:04-07'
          - 'functional:FO:08-12'
          - 'functional:FO:classic:01-03'
          - 'functional:FO:classic:04-07'
          - 'functional:FO:classic:08-12'
          - 'functional:FO:hummingbird:01-03'
          - 'functional:productV2'
          - 'functional:WS'
          - 'modules'
          - 'regression'
          - 'sanity'
          - 'sanity:productV2'
        BASE_BRANCH:
          - ${{ startsWith(inputs.target_ref, '1.7') && '1.7.8.x' || startsWith(inputs.target_ref, '8.0') && '8.0.x' || startsWith(inputs.target_ref, '8.1') && '8.1.x' || 'develop' }}
        exclude:
          ## 1.7.8.x
          - BASE_BRANCH: 1.7.8.x
            TEST_COMMAND: 'cldr'
          - BASE_BRANCH: 1.7.8.x
            TEST_COMMAND: 'functional:BO:dashboard'
          - BASE_BRANCH: 1.7.8.x
            TEST_COMMAND: 'functional:productV2'
          - BASE_BRANCH: 1.7.8.x
            TEST_COMMAND: 'functional:API'
          - BASE_BRANCH: 1.7.8.x
            TEST_COMMAND: 'functional:FO:classic:01-03'
          - BASE_BRANCH: 1.7.8.x
            TEST_COMMAND: 'functional:FO:classic:04-07'
          - BASE_BRANCH: 1.7.8.x
            TEST_COMMAND: 'functional:FO:classic:08-12'
          - BASE_BRANCH: 1.7.8.x
            TEST_COMMAND: 'functional:FO:hummingbird:01-03'
          - BASE_BRANCH: 1.7.8.x
            TEST_COMMAND: 'functional:WS'
          - BASE_BRANCH: 1.7.8.x
            TEST_COMMAND: 'modules'
          - BASE_BRANCH: 1.7.8.x
            TEST_COMMAND: 'sanity:productV2'
          ## 8.0.x
          - BASE_BRANCH: 8.0.x
            TEST_COMMAND: 'cldr'
          - BASE_BRANCH: 8.0.x
            TEST_COMMAND: 'functional:BO:dashboard'
          - BASE_BRANCH: 8.0.x
            TEST_COMMAND: 'functional:productV2'
          - BASE_BRANCH: 8.0.x
            TEST_COMMAND: 'functional:API'
          - BASE_BRANCH: 8.0.x
            TEST_COMMAND: 'functional:FO:classic:01-03'
          - BASE_BRANCH: 8.0.x
            TEST_COMMAND: 'functional:FO:classic:04-07'
          - BASE_BRANCH: 8.0.x
            TEST_COMMAND: 'functional:FO:classic:08-12'
          - BASE_BRANCH: 8.0.x
            TEST_COMMAND: 'functional:FO:hummingbird:01-03'
          - BASE_BRANCH: 8.0.x
            TEST_COMMAND: 'functional:WS'
          - BASE_BRANCH: 8.0.x
            TEST_COMMAND: 'modules'
          ## 8.1.x
          - BASE_BRANCH: 8.1.x
            TEST_COMMAND: 'functional:FO:01-03'
          - BASE_BRANCH: 8.1.x
            TEST_COMMAND: 'functional:FO:04-07'
          - BASE_BRANCH: 8.1.x
            TEST_COMMAND: 'functional:FO:08-12'
          ## develop
          - BASE_BRANCH: develop
            TEST_COMMAND: 'functional:FO:01-03'
          - BASE_BRANCH: develop
            TEST_COMMAND: 'functional:FO:04-07'
          - BASE_BRANCH: develop
            TEST_COMMAND: 'functional:FO:08-12'

    env:
      PS_MODE_DEV: '0'
      PS_DIR: 'my_prestashop'
      ## Install PrestaShop & UI Tests
      VERSION: ${{ inputs.php_version }}-apache
      PS_INSTALL_AUTO: 1
      DB_USER: root
      DB_PASSWD: prestashop
      DB_NAME: prestashop
      DB_SERVER: mysql
      DB_PREFIX: tst_
      PS_DOMAIN: ${{ (startsWith(inputs.source_ref, '1.7') || startsWith(inputs.source_ref, '8.0')) && 'localhost:8001' || 'localhost:8002' }}
      PS_FOLDER_INSTALL: install-dev
      PS_FOLDER_ADMIN: admin-dev
      PS_COUNTRY: fr
      PS_LANGUAGE: en
      PS_DEV_MODE: '0'
      PS_ENABLE_SSL: ${{ (startsWith(inputs.source_ref, '1.7') || startsWith(inputs.source_ref, '8.0')) && '0' || '1' }}
      ADMIN_MAIL: 'demo@prestashop.com'
      ADMIN_PASSWD: ${{ startsWith(inputs.source_ref, '1.7') && 'prestashop_demo' || 'Correct Horse Battery Staple' }}

    steps:
      - name: Print Inputs values
        shell: bash
        run: echo "${{ toJSON(inputs) }}"

      # Set up environment
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node_version }}
      - name: Setup NPM
        run: npm install -g npm@7

      # Checkout PrestaShop source
      - uses: actions/checkout@v3
        name: Checkout PrestaShop repository with source branch/tag ${{ inputs.source_ref }}
        with:
          repository: PrestaShop/PrestaShop
          path: ${{ env.PS_DIR }}
          ref: ${{ inputs.source_ref }}

      # Certificate
      - name: Generate a certificate
        if: startsWith(inputs.source_ref, '8.1') || (inputs.source_ref == 'develop')
        run: |
          ## Install MkCert
          sudo apt install libnss3-tools
          curl -JLO "https://dl.filippo.io/mkcert/latest?for=linux/amd64"
          chmod +x mkcert-v*-linux-amd64
          sudo cp mkcert-v*-linux-amd64 /usr/local/bin/mkcert
          ## Generate certificate
          mkcert -key-file ./${{ env.PS_DIR }}/.docker/ssl.key -cert-file ./${{ env.PS_DIR }}/.docker/ssl.crt localhost
          ## Link certificate to Chrome Trust Store
          mkdir -p $HOME/.pki/nssdb 
          certutil -d $HOME/.pki/nssdb -N 
          certutil -d sql:$HOME/.pki/nssdb -n localhost -A -t "TCu,Cu,Tu" -i ./${{ env.PS_DIR }}/.docker/ssl.crt
          ## Add self-signed certificate to Chrome Trust Store
          mkcert -install

      # Workaround until https://github.com/PrestaShop/PrestaShop/issues/29813 is fixed
      - name: PrestaShop Configuration (Copy of Config API)
        if: (env.BASE_BRANCH == '8.1.x') || (env.BASE_BRANCH == 'develop')
        run: cp ./${{ env.PS_DIR }}/app/config/security_test.yml ./${{ env.PS_DIR }}/app/config/security_prod.yml

      # Create shop with Docker
      - name: Build and run shop with docker
        working-directory: ${{ env.PS_DIR }}
        timeout-minutes: 15
        env:
          DISABLE_MAKE: 0
          URL_FO: ${{ (startsWith(inputs.source_ref, '1.7') || startsWith(inputs.source_ref, '8.0')) && 'http://localhost:8001/' || 'https://localhost:8002/' }}
          VERSION: ${{ startsWith(inputs.source_ref, '1.7') && inputs.php_version || env.VERSION }}
        run: |
          echo "    container_name: prestashop_autoupgrade" >> docker-compose.yml
          USER_ID=$(id -u) GROUP_ID=$(id -g) docker-compose -f docker-compose.yml up -d --build
          bash -c 'while [[ "$(curl -L -s -o /dev/null -w %{http_code} ${{ env.URL_FO }}en/)" != "200" ]]; do sleep 5; done'
          docker ps

      # Install upgrade module and run CLI upgrade
      - uses: actions/checkout@v3
        name: Checkout Autoupgrade module
        with:
          repository: PrestaShop/autoupgrade
          path: ${{ env.PS_DIR }}/modules/autoupgrade
          ref: ${{ inputs.upgrade_module_ref }}
      - name: Composer install in module
        run: composer install
        working-directory: ${{ env.PS_DIR }}/modules/autoupgrade
      - name: Install module via CLI commands
        run: docker exec -u www-data prestashop_autoupgrade php bin/console prestashop:module install autoupgrade

      # If nightly build is used we download the archives and xml file and perform an upgrade via archive channel
      - name: Upgrade shop to nightly build ${{ inputs.target_ref }}
        if: ${{ inputs.use_nightly_build }}
        run: |
          echo Upgrading to version ${{ fromJson(needs.get_ps_nightly_target_version.outputs.target_version).version }} - ${{ fromJson(needs.get_ps_nightly_target_version.outputs.target_version).zip }}
          docker exec -u www-data prestashop_autoupgrade mkdir admin-dev/autoupgrade/download
          docker exec -u www-data prestashop_autoupgrade curl -L ${{ fromJson(needs.get_ps_nightly_target_version.outputs.target_version).zip }} -o admin-dev/autoupgrade/download/prestashop.zip
          docker exec -u www-data prestashop_autoupgrade curl -L ${{ fromJson(needs.get_ps_nightly_target_version.outputs.target_version).xml }} -o admin-dev/autoupgrade/download/prestashop.xml
          echo "{\"channel\":\"archive\",\"archive_prestashop\":\"prestashop.zip\",\"archive_num\":\"${{ fromJson(needs.get_ps_nightly_target_version.outputs.target_version).version }}\", \"archive_xml\":\"prestashop.xml\", \"PS_AUTOUP_CHANGE_DEFAULT_THEME\":"0", \"skip_backup\": "1"}" > ${{ env.PS_DIR }}/modules/autoupgrade/config.json
          docker exec -u www-data prestashop_autoupgrade php modules/autoupgrade/cli-updateconfig.php --from=modules/autoupgrade/config.json --dir=admin-dev
          docker exec -u www-data prestashop_autoupgrade php modules/autoupgrade/tests/testCliProcess.php modules/autoupgrade/cli-upgrade.php --dir="admin-dev" --action="compareReleases"
          docker exec -u www-data prestashop_autoupgrade php modules/autoupgrade/tests/testCliProcess.php modules/autoupgrade/cli-upgrade.php --dir=admin-dev

      # If nightly build is NOT used we checkout the target repository in the latest folder
      - uses: actions/checkout@v3
        name: Checkout target from branch/tag ${{ inputs.target_ref }} in latest folder
        if: ${{ inputs.use_nightly_build == false }}
        with:
          repository: PrestaShop/PrestaShop
          path: ${{ env.PS_DIR }}/admin-dev/autoupgrade/latest
          ref: ${{ inputs.target_ref }}
      - name: Build assets and dependencies in target version
        if: ${{ inputs.use_nightly_build == false }}
        run: |
          composer install
          make assets
        working-directory: ${{ env.PS_DIR }}/admin-dev/autoupgrade/latest
      - name: Upgrade shop to target branch/tag ${{ inputs.target_ref }} version ${{ inputs.target_version }}
        if: ${{ inputs.use_nightly_build == false }}
        run: |
          echo "{\"channel\":\"directory\",\"directory_num\":\"${{ inputs.target_version }}\", \"PS_AUTOUP_CHANGE_DEFAULT_THEME\":"0", \"PS_DISABLE_OVERRIDES:\"0\"\", \"PS_AUTOUP_CUSTOM_MOD_DESACT\": \"0\", \"skip_backup\": "1"}" > ${{ env.PS_DIR }}/modules/autoupgrade/config.json
          docker exec -u www-data prestashop_autoupgrade php modules/autoupgrade/cli-updateconfig.php --from=modules/autoupgrade/config.json --dir=admin-dev
          docker exec -u www-data prestashop_autoupgrade php modules/autoupgrade/tests/testCliProcess.php modules/autoupgrade/cli-upgrade.php --dir="admin-dev" --action="compareReleases"
          docker exec -u www-data prestashop_autoupgrade php modules/autoupgrade/tests/testCliProcess.php modules/autoupgrade/cli-upgrade.php --dir=admin-dev

      # Checkout PrestaShop target UI tests
      - uses: actions/checkout@v3
        name: Checkout tests from target branch/version ${{ inputs.target_ref }}
        with:
          repository: PrestaShop/PrestaShop
          path: target_prestashop_tests
          ref: ${{ inputs.target_ref }}
      - name: Clear UI tests from source branch and copy those from target
        shell: bash
        run: |
          rm -fR ${{ env.PS_DIR }}/tests/UI
          cp -R target_prestashop_tests/tests/UI ${{ env.PS_DIR }}/tests/UI
      - name: Install tests dependencies
        run: npm install
        working-directory: ${{ env.PS_DIR }}/tests/UI

      # Run tests
      - name: Run tests
        id: run_tests
        run: |
          export NODE_EXTRA_CA_CERTS="$(mkcert -CAROOT)/rootCA.pem"
          npm run test:${{ matrix.TEST_COMMAND }}
        working-directory: ${{ env.PS_DIR }}/tests/UI
        env:
          URL_FO: ${{ (startsWith(inputs.source_ref, '1.7') || startsWith(inputs.source_ref, '8.0')) && 'http://localhost:8001/' || 'https://localhost:8002/' }}
          DB_NAME: prestashop
          DB_PASSWD: prestashop
          HEADLESS: true
          ENABLE_SSL: true
          TAKE_SCREENSHOT_AFTER_FAIL: true
          SMTP_SERVER: '172.17.0.1'

      # UI Tests : Upload screenshots
      - name: Create backup of the shop to upload as artifacts if a step failed and option upload_shop_on_failure is enabled
        if: ${{ inputs.upload_shop_on_failure && failure() }}
        run: |
          zip -r shop_artifact.zip ${{ env.PS_DIR }}
          docker exec my_prestashop_mysql_1 /usr/bin/mysqldump -u ${{ env.DB_USER }} --password=${{ env.DB_PASSWD }} ${{ env.DB_NAME }} > db_artifact.sql

      - run: echo "SCREENSHOT_CAMPAIGN=$( echo -e '${{ matrix.TEST_COMMAND }}' | tr ':' '-' )" >> $GITHUB_ENV
        if: ${{ always() }}

      - uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: screenshots-${{ env.SCREENSHOT_CAMPAIGN }}
          path: |
            ${{ env.PS_DIR }}/tests/UI/screenshots/
            shop_artifact.zip
            db_artifact.sql
